import logging
import os
import json
import requests
from dotenv import load_dotenv
from telegram import Update, Document
from telegram.ext import (
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    ApplicationBuilder
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path="API.env")
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
F5AI_API_KEY = os.getenv('F5AI_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
F5AI_API_URL = "https://api.f5ai.ru/v1/chat/completions"
DEFAULT_MODEL = "gpt-4o-mini"
DEFAULT_MAX_TOKENS = 1500
DEFAULT_TEMPERATURE = 0.7

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞
user_conversations = {}
MAX_CONVERSATION_HISTORY = 10

# --- –ó–∞–ø—Ä–æ—Å –∫ F5AI ---
def call_f5ai_api(messages: list, model=DEFAULT_MODEL, max_tokens=DEFAULT_MAX_TOKENS, temperature=DEFAULT_TEMPERATURE) -> dict:
    if not F5AI_API_KEY:
        return {"error": "F5AI_API_KEY is not configured."}

    headers = {
        "Content-Type": "application/json",
        "X-Auth-Token": F5AI_API_KEY
    }
    data = {
        "model": model,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature
    }

    try:
        logger.info(f"Sending request to F5AI: {json.dumps(data, ensure_ascii=False)}")
        response = requests.post(F5AI_API_URL, headers=headers, json=data, timeout=45)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"}
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
async def start_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_conversations[user.id] = [
        {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ–µ –∏–º—è Kanata AI."}
    ]
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø ‚Äî Kanata AI ü§ñ‚ú®\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ .txt —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )

async def reset_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user_conversations[user_id] = [
        {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ–µ –∏–º—è Kanata AI."}
    ]
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ~")

async def handle_text(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    text = update.message.text

    if not F5AI_API_KEY:
        await update.message.reply_text("F5AI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    if user_id not in user_conversations:
        user_conversations[user_id] = [
            {"role": "system", "content": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ–µ –∏–º—è Kanata AI."}
        ]

    user_conversations[user_id].append({"role": "user", "content": text})
    if len(user_conversations[user_id]) > MAX_CONVERSATION_HISTORY + 1:
        user_conversations[user_id] = [user_conversations[user_id][0]] + user_conversations[user_id][-MAX_CONVERSATION_HISTORY:]

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    api_response = call_f5ai_api(user_conversations[user_id])

    if "error" in api_response:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {api_response['error']}")
        return

    content = api_response.get("choices", [{}])[0].get("message", {}).get("content", "")
    if content:
        await update.message.reply_text(content)
        user_conversations[user_id].append({"role": "assistant", "content": content})
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")

async def handle_document(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ .txt"""
    file = update.message.document
    if file.mime_type != 'text/plain':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")
        return

    file_obj = file.get_file()
    content = file_obj.download_as_bytearray().decode("utf-8")

    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
    update.message.text = content  # –ü—Ä–∏—Ç–≤–æ—Ä–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await handle_text(update, context)

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(f"Exception: {context.error}", exc_info=context.error)
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main() -> None:
    try:
        if not TELEGRAM_BOT_TOKEN:
            logger.critical("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("reset", reset_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        app.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        app.run_polling(drop_pending_updates=True, allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()